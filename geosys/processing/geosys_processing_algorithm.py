# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeosysProcessingProvider
                                 A QGIS plugin
 GeosysProcessingProvider
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-03-30
        copyright            : (C) 2019 by Kartoza Pty. Ltd
        email                : rohmat@kartoza.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QCoreApplication, QDate
from PyQt5.QtWidgets import QDateEdit
from processing.gui.wrappers import WidgetWrapper
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterString)

from geosys.bridge_api.definitions import INSEASON_MAP_PRODUCTS, SENSORS

__copyright__ = "Copyright 2019, Kartoza"
__license__ = "GPL version 3"
__email__ = "rohmat@kartoza.com"
__revision__ = "$Format:%H$"


class DateWidgetWrapper(WidgetWrapper):
    """WidgetWrapper for QgsProcessingParameterString that create and manage
    a QDateEdit widget.
    """
    def createWidget(self):
        """Override method."""
        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        return self.date_edit

    def setValue(self, value):
        """Override method."""
        date = QDate.fromString(value, 'yyyy-MM-dd')
        self.date_edit.setDate(date)

    def value(self):
        """Override method."""
        return self.date_edit.date().toString('yyyy-MM-dd')


class MapCoverageDownloader(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT = 'INPUT'
    COVERAGE_DATE = 'COVERAGE DATE'
    MAP_PRODUCT = 'MAP PRODUCT'
    SENSOR = 'SENSOR'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return MapCoverageDownloader()

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'create_coverage_map'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Create coverage map')

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It only allows polygon.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Coverage layer'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # Coverage date. Will search the most recent map product prior to
        # the coverage date.
        date_param = QgsProcessingParameterString(
            self.COVERAGE_DATE, self.tr('Coverage date'))
        date_param.setMetadata({
            'widget_wrapper': {
                'class': DateWidgetWrapper
            }
        })
        self.addParameter(date_param)

        # Map products options.
        map_products = []
        for map_product in INSEASON_MAP_PRODUCTS:
            map_products.append(map_product['key'])
        self.addParameter(
            QgsProcessingParameterEnum(
                self.MAP_PRODUCT,
                self.tr('Map product'),
                options=map_products,
                defaultValue=0
            )
        )

        # Sensor options.
        sensors = []
        for sensor in SENSORS:
            sensors.append(sensor['key'])
        self.addParameter(
            QgsProcessingParameterEnum(
                self.SENSOR,
                self.tr('Sensor'),
                options=sensors,
                defaultValue=0
            )
        )

        # Output directory where the map product of the coverage search will be
        # placed.
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, source.fields(), source.wkbType(), source.sourceCrs())

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            # Add a feature in the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}
